# https://blog.postman.com/rest-api-examples/
# want to use requests library https://requests.readthedocs.io/en/latest/
# want to use sqlite3 https://docs.python.org/3/library/sqlite3.html
# paginate with request params in url - https://ignaciochiazzo.medium.com/paginating-requests-in-apis-d4883d4c1c4c
# https://medium.com/@saurav200892/how-to-achieve-idempotency-in-post-method-d88d7b08fcdd
# use an itempotency key generated by the client - https://www.mscharhag.com/api-design/rest-making-post-patch-idempotent
# post request field validation - https://docs.pydantic.dev/latest/
# sort with request params in https://stackoverflow.com/questions/60570195/using-python-requests-package-to-sort-by-date
# sql schema examples - https://www.google.com/search?sca_esv=33151e72f49c1001&rlz=1C1RXQR_enUS1021US1021&sxsrf=AHTn8zqqtmdc1iWox23TsEInrRb0BRLM4w:1744938733748&q=sql+schema&udm=2&fbs=ABzOT_CWdhQLP1FcmU5B0fn3xuWpA-dk4wpBWOGsoR7DG5zJBkzPWUS0OtApxR2914vrjk4ZqZZ4I2IkJifuoUeV0iQtlsVaSqiwnznvC1owt2z2tTdc23Auc6X4y2i7IIF0f-d_O-E9yXafSm5foej9KNb5dB5UNNsgm78dv2qEeljVjLTUov5wWn4x9of_4BNb8vF_2a_9-AxwH0UJGyfTMDuJ_sz_gg&sa=X&sqi=2&ved=2ahUKEwiS44Srs-CMAxX2JzQIHWvSC2UQtKgLegQIEhAB&biw=1920&bih=911&dpr=1#vhid=-BbjLoFxbt71lM&vssid=mosaic
# can enrich with threat score based on # of failed logins in last x minutes

from datetime import datetime
from flask import Flask, request
from enum import Enum
from pydantic import BaseModel
import sqlite3
from waitress import serve
from uuid import uuid4

app = Flask(__name__)

con = sqlite3.connect("main.db")
cur = con.cursor()
cur.execute("CREATE TABLE IF NOT EXISTS login_data(tenant_id varchar(255), user_id varchar(255), origin varchar(255), status varchar(255), date timestamp, i_key varchar(255))")

class LoginStatus(str, Enum):
    success = 'success'
    fail = 'fail'


class LoginData(BaseModel):
    tenant_id: str
    user_id: str
    origin: str
    status: LoginStatus
    date: datetime
    i_key: str # idempotency key passed from client


@app.route('/ingest_login_data', methods=['POST'])
def ingest_login_data():
    login_data = LoginData(**request.json)
    return login_data.model_dump()

@app.route('/suspicious_events', methods=['GET'])
def suspicious_events():
    return str(datetime.now()) + " " + str(uuid4())

serve(app, host="0.0.0.0", port=5000)